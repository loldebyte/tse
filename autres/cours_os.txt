/*open_bsd : OS qui choisit de refuser toutes les requetes presentant un pb de sécurité : ex, si toute mémoire allouée alors on refuse l'alloc..
vmm virtual memory manager (grosso merdo garbage collector version OS)

gestion mémoire moderne : paginée, segmentée et virtuelle :
mémoire allouée par pages
segmentée en pages de 1ko
virtuelles d'adresses : mmu memory management unit
valgrind -> C prog qui réécrit malloc pour vérifier les pb de mémoires et conserve une trace (utiliser via gdb & clang-analyser)

never use vfork : use fork. cf man fork
exec : cf exec_readme.txt
UTILISEZ EXECVE : environnements

Selon l'OS l'ordre des segments mémoire peut changer, sous GNU/Linux c'est : /!\ ceci est la mémoire virtuelle /!\
Kernel
?
Stack
.mms m (librairies dynamiques : .so sous GLinux) 
Heap
?
.bss
.data
.text (code)
?

Un processus a : un espace mémoire (plusieurs des segments ci dessus, a minima .text) et des registres
les parties de l'espace mémoire qui sont conservées dans le fichier (l'image mémoire sur le disque) sont .bss .data et .text, plus qq autres

exec de lancement de prog par bash :
./a.out
>vérification que la commande est valide etc...
>bash se fork
>l'enfant exec le programme d'entrée
software/hardware interface David Patterson John L. Hennessy

mémoire physique :
gestion interuption
?
Périphériques
?
process0
process1
?
kernel data /!\ le kernel n'est jamais fixe sur la mémoire physique, pour éviter les attaques...
kernel code


"code as data" => données <=> code : pas faux grace a la mémoire virtuelle


*/
